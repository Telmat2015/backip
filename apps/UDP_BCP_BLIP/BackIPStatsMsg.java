/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'BackIPStatsMsg'
 * message type.
 */

public class BackIPStatsMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 13;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 137;

    /** Create a new BackIPStatsMsg of size 13. */
    public BackIPStatsMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new BackIPStatsMsg of the given data_length. */
    public BackIPStatsMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BackIPStatsMsg with the given data_length
     * and base offset.
     */
    public BackIPStatsMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BackIPStatsMsg using the given byte array
     * as backing store.
     */
    public BackIPStatsMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BackIPStatsMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public BackIPStatsMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BackIPStatsMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public BackIPStatsMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BackIPStatsMsg embedded in the given message
     * at the given base offset.
     */
    public BackIPStatsMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BackIPStatsMsg embedded in the given message
     * at the given base offset and length.
     */
    public BackIPStatsMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <BackIPStatsMsg> \n";
      try {
        s += "  [sender=0x"+Long.toHexString(get_sender())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ctr=0x"+Long.toHexString(get_ctr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [recv_time=0x"+Long.toHexString(get_recv_time())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [delay=0x"+Long.toHexString(get_delay())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sender
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sender' is signed (false).
     */
    public static boolean isSigned_sender() {
        return false;
    }

    /**
     * Return whether the field 'sender' is an array (false).
     */
    public static boolean isArray_sender() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sender'
     */
    public static int offset_sender() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sender'
     */
    public static int offsetBits_sender() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'sender'
     */
    public short get_sender() {
        return (short)getUIntBEElement(offsetBits_sender(), 8);
    }

    /**
     * Set the value of the field 'sender'
     */
    public void set_sender(short value) {
        setUIntBEElement(offsetBits_sender(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'sender'
     */
    public static int size_sender() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sender'
     */
    public static int sizeBits_sender() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ctr
    //   Field type: long, unsigned
    //   Offset (bits): 8
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ctr' is signed (false).
     */
    public static boolean isSigned_ctr() {
        return false;
    }

    /**
     * Return whether the field 'ctr' is an array (false).
     */
    public static boolean isArray_ctr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ctr'
     */
    public static int offset_ctr() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ctr'
     */
    public static int offsetBits_ctr() {
        return 8;
    }

    /**
     * Return the value (as a long) of the field 'ctr'
     */
    public long get_ctr() {
        return (long)getUIntBEElement(offsetBits_ctr(), 32);
    }

    /**
     * Set the value of the field 'ctr'
     */
    public void set_ctr(long value) {
        setUIntBEElement(offsetBits_ctr(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'ctr'
     */
    public static int size_ctr() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ctr'
     */
    public static int sizeBits_ctr() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: recv_time
    //   Field type: long, unsigned
    //   Offset (bits): 40
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'recv_time' is signed (false).
     */
    public static boolean isSigned_recv_time() {
        return false;
    }

    /**
     * Return whether the field 'recv_time' is an array (false).
     */
    public static boolean isArray_recv_time() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'recv_time'
     */
    public static int offset_recv_time() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'recv_time'
     */
    public static int offsetBits_recv_time() {
        return 40;
    }

    /**
     * Return the value (as a long) of the field 'recv_time'
     */
    public long get_recv_time() {
        return (long)getUIntBEElement(offsetBits_recv_time(), 32);
    }

    /**
     * Set the value of the field 'recv_time'
     */
    public void set_recv_time(long value) {
        setUIntBEElement(offsetBits_recv_time(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'recv_time'
     */
    public static int size_recv_time() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'recv_time'
     */
    public static int sizeBits_recv_time() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: delay
    //   Field type: long, unsigned
    //   Offset (bits): 72
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'delay' is signed (false).
     */
    public static boolean isSigned_delay() {
        return false;
    }

    /**
     * Return whether the field 'delay' is an array (false).
     */
    public static boolean isArray_delay() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'delay'
     */
    public static int offset_delay() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'delay'
     */
    public static int offsetBits_delay() {
        return 72;
    }

    /**
     * Return the value (as a long) of the field 'delay'
     */
    public long get_delay() {
        return (long)getUIntBEElement(offsetBits_delay(), 32);
    }

    /**
     * Set the value of the field 'delay'
     */
    public void set_delay(long value) {
        setUIntBEElement(offsetBits_delay(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'delay'
     */
    public static int size_delay() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'delay'
     */
    public static int sizeBits_delay() {
        return 32;
    }

}
